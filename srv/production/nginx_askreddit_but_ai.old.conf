upstream askreddit_but_ai_app_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).
 
  server 127.0.0.1:8007 fail_timeout=0;
}
 
server {
    server_name askredditbut.ai www.askredditbut.ai;
 
    client_max_body_size 4G;
    fastcgi_buffers 16 16k;
    fastcgi_buffer_size 32k;
 
    access_log /usr/local/src/askreddit_but_ai/logs/nginx-access.log;
    error_log /usr/local/src/askreddit_but_ai/logs/nginx-error.log;
 
    location /static/ {
             alias  /usr/local/src/askreddit_but_ai/arai/staticfiles/;
    }

    location /robots.txt {
	     alias /usr/local/src/askreddit_but_ai/arai/staticfiles/robots.txt;
    }
    
    location / {
        # an HTTP header important enough to have its own Wikipedia entry:
        #   http://en.wikipedia.org/wiki/X-Forwarded-For
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
 
        # enable this if and only if you use HTTPS, this helps Rack
        # set the proper protocol for doing redirects:
        proxy_set_header X-Forwarded-Proto https;
 
        # pass the Host: header from the client right along so redirects
        # can be set properly within the Rack application
        proxy_set_header Host $http_host;
 
        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;
 
        # set "proxy_buffering off" *only* for Rainbows! when doing
        # Comet/long-poll stuff.  It's also safe to set if you're
        # using only serving fast clients with Unicorn + nginx.
        # Otherwise you _want_ nginx to buffer responses to slow
        # clients, really.
        # proxy_buffering off;
 
        # Try to serve static files from nginx, no point in making an
        # *application* server like Unicorn/Rainbows! serve static files.
        if (!-f $request_filename) {
            proxy_pass http://askreddit_but_ai_app_server;
            break;
        }
    }


    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/askredditbut.ai/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/askredditbut.ai/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot


}

 
server {
    if ($host = www.askredditbut.ai) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    if ($host = askredditbut.ai) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


 
    listen   80;
    server_name askredditbut.ai www.askredditbut.ai;
    return 404; # managed by Certbot




}
